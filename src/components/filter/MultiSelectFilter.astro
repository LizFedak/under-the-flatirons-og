---
export interface Option {
  value: string;
  label?: string;
  disabled?: boolean;
}

export interface Props {
  id?: string;
  label: string;
  options: Option[];
  selectedValues?: string[]; // initial selected values
}

const {
  id = crypto.randomUUID(),
  label,
  options,
  selectedValues = []
} = Astro.props as Props;

const selected = new Set<string>(selectedValues);
---

<style>
  .msf { position: relative; display: inline-block; }
  .btn { display:flex; align-items:center; gap:.5rem; padding:.5rem .75rem; border:1px solid var(--msf-border, #d1d5db); border-radius:.75rem; background:var(--msf-bg, #fff); color:var(--msf-fg, #111827); cursor:pointer; min-width: 10rem; }
  .btn:hover { box-shadow:0 1px 2px rgba(0,0,0,.06), 0 2px 8px rgba(0,0,0,.06); }
  .caret { width:.6rem; height:.6rem; border-right:2px solid currentColor; border-bottom:2px solid currentColor; transform:rotate(45deg); margin-left:auto; transition: transform .15s ease; opacity:.8; }
  /* FIX: caret rotation should react to the BUTTON'S aria-expanded */
  .btn[aria-expanded="true"] .caret { transform: rotate(-135deg); }

  .panel { position:absolute; z-index: 50; inset-inline-start:0; margin-top:.4rem; background:#fff; border:1px solid #e5e7eb; border-radius:.75rem; box-shadow:0 10px 30px rgba(0,0,0,.08); width: max(18rem, 100%); max-height: 18rem; overflow:auto; padding:.25rem; display:none; }
  .panel.open { display:block; }
  .option { display:flex; align-items:center; gap:.6rem; padding:.5rem .5rem; border-radius:.5rem; cursor:pointer; user-select:none; }
  .option:hover { background:#f3f4f6; }
  .chk { appearance:none; width:1.05rem; height:1.05rem; border:2px solid #9ca3af; border-radius:.35rem; display:grid; place-items:center; transition: all .12s ease-in-out; background:white; }
  .chk:checked { border-color: #2563eb; background: #2563eb; }
  .chk:checked::after { content:""; width:.45rem; height:.45rem; background:white; border-radius:.1rem; }
  .sr-only { position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0; }
  .tagrow { display:flex; flex-wrap:wrap; gap:.35rem; }
  .tag { background:#eef2ff; color:#3730a3; padding:.1rem .4rem; border-radius:.5rem; font-size:.75rem; }

  @media (max-width: 768px) {
    .msf {
      width: 100%;
    }
  .btn {
    /* min-width: 100%; */
    width: 100%;
  }
}


</style>

<div class="msf hoverable" id={id} data-component="MultiSelectFilter" data-uid={id} data-variant="default">
  <button class="btn" type="button" aria-haspopup="listbox" aria-expanded="false" aria-controls={`${id}-panel`} data-role="toggle">
    <span data-role="title">{label}</span>
    <span class="tagrow" data-role="summary"></span>
    <span class="caret" aria-hidden="true"></span>
  </button>
  <div class="panel" id={`${id}-panel`} role="listbox" aria-multiselectable="true">
    {options.map((opt, i) => {
      const isChecked = selected.has(opt.value);
      const optId = `${id}-opt-${i}`;
      return (
        <label class="option" for={optId} aria-disabled={opt.disabled ? 'true' : 'false'}>
          <input class="chk" type="checkbox" id={optId} name={id} value={opt.value} checked={isChecked} disabled={opt.disabled} />
          <span>{opt.label ?? opt.value}</span>
        </label>
      );
    })}
  </div>
</div>