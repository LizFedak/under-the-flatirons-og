---
export interface ImageOption {
  value: string;
  label?: string;
  imageUrl?: string; // supports legacy mapping too
  img?: string;
  disabled?: boolean;
}
export interface Props {
  id?: string;
  label: string;
  options: ImageOption[];
  selectedValues?: string[];
}
const { id = crypto.randomUUID(), label, options, selectedValues = [] } = Astro.props as Props;
const selected = new Set<string>(selectedValues);
---

<style>
  .msf { display:block; width:100%; } /* full-row friendly */
  .sr-only { position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0; }

  .imgList { 
    display: flex; flex-wrap: wrap; gap: 10px; width: 100%; justify-content: center;box-sizing: border-box;}
  .image-option { display:flex; flex-direction:column; align-items:center; gap:.35rem; cursor:pointer; padding:.5rem; border-radius: .15rem; user-select:none; }
  .image-option input[type="checkbox"] { position:absolute; opacity:0; pointer-events:none; }
  .image-option img { border:3px solid transparent; border-radius:25%; transition:border-color .2s ease; width:150px; height:150px; object-fit:cover; background:#f3f4f6; }




/* Base: when not checked */
.image-option img {
  border: 5px solid transparent;
}

.imgList .image-option:nth-of-type(5n + 1) input:checked + img {
  border-color: #04e762;
}
.imgList .image-option:nth-of-type(5n + 2) input:checked + img {
  border-color: #ffbe0b;
}

.imgList .image-option:nth-of-type(5n + 3) input:checked + img {
  border-color: #2609d6;
}

.imgList .image-option:nth-of-type(5n + 4) input:checked + img {
  border-color: #ff006e;
}

.imgList .image-option:nth-of-type(5n + 5) input:checked + img {
  border-color: #8338ec;
}






</style>

<div class="msf" id={id} data-component="ImageMultiSelectFilter" data-uid={id} data-variant="image">
  <span class="sr-only" data-role="title">{label}</span>
  <div class="imgList" id={`${id}-imgList`} role="listbox" aria-multiselectable="true">
    {options.map((opt) => {
      const isChecked = selected.has(opt.value);
      const src = opt.imageUrl ?? opt.img ?? '';
      return (
        <label class="image-option">
          <input type="checkbox" value={opt.value} checked={isChecked} disabled={opt.disabled} />
          <img src={src} alt={opt.label ?? opt.value} loading="lazy" />
          {/* <span>{opt.label ?? opt.value}</span> */}
        </label>
      );
    })}
  </div>
</div>
