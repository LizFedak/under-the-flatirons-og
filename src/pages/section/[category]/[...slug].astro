---
// src/pages/blog/[slug].astro
export const prerender = true;

import BlogPost from '../../../layouts/BlogPost.astro';
import { supabase } from '../../../lib/supabase';
import { marked } from 'marked';

type PostRow = {
  record_id: string;
  title: string;
  description?: string;
  content?: string;
  published_at?: string;
  updated_date?: string;
  hero_image_url?: string;
  tag?: string | string[] | null;
  author?: string;
  image_alt?: string;
  featured?: boolean;
  published?: boolean | null;
  category?: string | null;
};




export async function getStaticPaths() {
  const { data, error } = await supabase
    .from('articles')
    .select('record_id,published,category');

  if (error) throw new Error(error.message);

  // if `published` can be null/undefined, relax the predicate as needed
  const rows = (data ?? []).filter((r) => r.published === true);

  if (import.meta.env.DEV) console.log('[getStaticPaths] paths:', rows.length);

  return rows.map((row) => ({
    params: { category: row.category.toLowerCase(), slug: row.record_id },
  }));
}

// âœ… read from Astro.params (not props)
const raw = Astro.params.slug as string | string[] | undefined;
const id  = Array.isArray(raw) ? raw.join('/') : (raw ?? '');

if (!id) {
  // return (don't throw) to avoid "Error: {}"
  return Astro.redirect('/blog');
}

const { data: post, error } = await supabase
  .from('articles')
  .select('*')
  .eq('record_id', id)
  .single<PostRow>();

if (error) {
  console.error('Supabase error (detail):', error);
  // show a 404 rather than throwing a non-Error
  return new Response('Not found', { status: 404 });
}

if (!post?.published) {
  return new Response('Not found', { status: 404 });
}

const html = marked.parse(post.content ?? '');
---

<BlogPost
  title={post.title}
  description={post.description}
  published_at={post.published_at}
  updatedAt={post.updated_at}
  tag={post.tag}
  author={post.author}
  imageAlt={post.image_alt}
  featured={post.featured}
  heroImageUrl={post.hero_image_url}
  category={post.category}
  content={post.content}
>
  <Fragment set:html={html} />
</BlogPost>